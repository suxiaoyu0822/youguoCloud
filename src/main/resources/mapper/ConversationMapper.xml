<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yogo.dao.ConversationMapper">
  <select id="selectClientIdByConversationId" parameterType="java.lang.Integer" resultType="java.lang.Integer">
    select client_id from conversation where conversation_id = #{conversationId}
  </select>
  <select id="selectTodayConversationCount" resultType="java.lang.Integer">
    select count(*) from conversation where service_id=#{serviceId} and (end_time BETWEEN #{dayStart} and #{dayEnd});
  </select>
  <select id="selectAllAvgScore" resultMap="AvgScoreListMap">
    select service_id,score from
    (select service_id,AVG(ifnull(score,0)) score from conversation
    group by service_id order by score desc) avg_score_table where service_id != 0
  </select>
  <update id="updateClientId" parameterType="map">
    update conversation set client_id = #{clientId} where conversation_id = #{conversationId}
  </update>
  <select id="selectNotFinishByServiceId" resultType="java.lang.Integer">
    select COUNT(*) from conversation where stop_time IS NULL  and service_id=#{serviceId};
  </select>
  <resultMap id="AvgScoreListMap" type="com.yogo.bean.AvgScoreList">
    <result column="service_id" jdbcType="INTEGER" property="serviceId" />
    <result column="score" jdbcType="DOUBLE" property="avgScore" />
  </resultMap>
  <resultMap id="BaseResultMap" type="com.yogo.entity.Conversation">
    <result column="conversation_id" jdbcType="INTEGER" property="conversationId" />
    <result column="client_id" jdbcType="INTEGER" property="clientId" />
    <result column="service_id" jdbcType="INTEGER" property="serviceId" />
    <result column="start_time" jdbcType="BIGINT" property="startTime" />
    <result column="stop_time" jdbcType="BIGINT" property="stopTime" />
    <result column="score" jdbcType="INTEGER" property="score" />
    <collection property="chatLogList" ofType="com.yogo.entity.ChatLog">
      <id column="chat_log_id" property="chatLogId"/>
      <result column="conversation_id" property="conversationId"/>
      <result column="sender_id" property="senderId"/>
      <result column="receiver_id" property="receiverId"/>
      <result column="content_type" property="contentType"/>
      <result column="content" property="content"/>
      <result column="time" property="time"/>
    </collection>
  </resultMap>
  <update id="updateAllStopTimeByServiceId">
    update conversation set stop_time = #{stopTime} where service_id=#{serviceId};
  </update>
  <update id="updateServiceId">
    update conversation set service_id = #{serviceId} where conversation_id=#{conversationId};
  </update>
  <select id="selectLastChatServiceId" resultType="com.yogo.entity.CustomerService">
    select customer_service.* from conversation, customer_service
    where client_id=#{clientId} AND is_dimission=0 AND customer_service.service_id!=0 AND customer_service.service_id=conversation.service_id
    ORDER BY stop_time DESC limit 0,1;
  </select>
  <select id="selectByClientId" resultMap="BaseResultMap">
    select conversation.*, chat_log.* from conversation, chat_log
    where conversation.conversation_id=chat_log.conversation_id
    and conversation.client_id=#{clientId};
  </select>
  <select id="selectByServiceId" resultMap="BaseResultMap">
    select conversation.*, chat_log.* from conversation, chat_log
    where conversation.conversation_id=chat_log.conversation_id
    and conversation.service_id=#{serviceId};
  </select>
  <select id="selectByConversationId" resultMap="BaseResultMap">
    select conversation.*, chat_log.* from conversation, chat_log
    where conversation.conversation_id=chat_log.conversation_id
    and conversation.conversation_id=#{conversationId};
  </select>
  <select id="selectCountByServiceId" resultType="java.lang.Integer">
    select count(*) from conversation
    where conversation.service_id=#{serviceId};
  </select>
  <select id="selectAvgScoreByServiceId" resultType="java.lang.Double">
    select AVG(ifnull(score,0)) from conversation where service_id=#{serviceId}
  </select>
  <update id="updateStopTime">
    update conversation set stop_time = #{stopTime}, score=#{score}
    where conversation_id=#{conversationId};
  </update>
  <update id="updateStopTimeWithoutScore">
    update conversation set stop_time = #{stopTime}
    where conversation_id=#{conversationId};
  </update>
  <update id="updateScore">
    update conversation set score = #{score} where conversation_id=#{conversationId};
  </update>
  <select id="selectLastIdByClientId" resultType="java.lang.Integer">
    select max(conversation_id) from conversation where client_id=#{clientId} and stop_time IS NULL;
  </select>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    conversation_id, client_id, service_id, start_time, stop_time, score
  </sql>
  <select id="selectByExample" parameterType="com.yogo.entity.ConversationExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from conversation
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="com.yogo.entity.ConversationExample">
    delete from conversation
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.yogo.entity.Conversation">
    insert into conversation (conversation_id, client_id, service_id, 
      start_time, stop_time, score
      )
    values (#{conversationId,jdbcType=INTEGER}, #{clientId,jdbcType=INTEGER}, #{serviceId,jdbcType=INTEGER}, 
      #{startTime,jdbcType=BIGINT}, #{stopTime,jdbcType=BIGINT}, #{score,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.yogo.entity.Conversation">
    insert into conversation
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="conversationId != null">
        conversation_id,
      </if>
      <if test="clientId != null">
        client_id,
      </if>
      <if test="serviceId != null">
        service_id,
      </if>
      <if test="startTime != null">
        start_time,
      </if>
      <if test="stopTime != null">
        stop_time,
      </if>
      <if test="score != null">
        score,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="conversationId != null">
        #{conversationId,jdbcType=INTEGER},
      </if>
      <if test="clientId != null">
        #{clientId,jdbcType=INTEGER},
      </if>
      <if test="serviceId != null">
        #{serviceId,jdbcType=INTEGER},
      </if>
      <if test="startTime != null">
        #{startTime,jdbcType=BIGINT},
      </if>
      <if test="stopTime != null">
        #{stopTime,jdbcType=BIGINT},
      </if>
      <if test="score != null">
        #{score,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.yogo.entity.ConversationExample" resultType="java.lang.Long">
    select count(*) from conversation
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update conversation
    <set>
      <if test="record.conversationId != null">
        conversation_id = #{record.conversationId,jdbcType=INTEGER},
      </if>
      <if test="record.clientId != null">
        client_id = #{record.clientId,jdbcType=INTEGER},
      </if>
      <if test="record.serviceId != null">
        service_id = #{record.serviceId,jdbcType=INTEGER},
      </if>
      <if test="record.startTime != null">
        start_time = #{record.startTime,jdbcType=BIGINT},
      </if>
      <if test="record.stopTime != null">
        stop_time = #{record.stopTime,jdbcType=BIGINT},
      </if>
      <if test="record.score != null">
        score = #{record.score,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update conversation
    set conversation_id = #{record.conversationId,jdbcType=INTEGER},
      client_id = #{record.clientId,jdbcType=INTEGER},
      service_id = #{record.serviceId,jdbcType=INTEGER},
      start_time = #{record.startTime,jdbcType=BIGINT},
      stop_time = #{record.stopTime,jdbcType=BIGINT},
      score = #{record.score,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  
  <!--Create By Cjn-->
  <select id="selectConversationNotFinish" resultType="int">
    SELECT  COUNT(*) FROM conversation WHERE  stop_time IS  NULL ;
  </select>
  <select id="selectRecentMonth" parameterType="long" resultType="com.yogo.entity.DayAndTime">
    SELECT
    stop_time as time,COUNT(*) as times
    FROM
    conversation
    WHERE
    TIMESTAMPDIFF(
    DAY,
    FROM_UNIXTIME(CAST((stop_time/1000) AS signed)),
    FROM_UNIXTIME(CAST((#{timestamp}/1000) AS signed))

    ) &lt; 15
    GROUP BY
    FROM_UNIXTIME(CAST((stop_time/1000) AS signed),'%Y%m%d');
  </select>
  
  <select id="selectRecentWeekend"  parameterType="long" resultType="com.yogo.entity.DayAndTime">
    SELECT
    stop_time as time,COUNT(*) as times
    FROM
    conversation
    WHERE
    TIMESTAMPDIFF(
    DAY,
    FROM_UNIXTIME(CAST((stop_time/1000) AS signed)),
    FROM_UNIXTIME(CAST((#{timestamp}/1000) AS signed))

    ) &lt; 7
    GROUP BY
    FROM_UNIXTIME(CAST((stop_time/1000) AS signed),'%Y%m%d%h');
  </select>
  
  <select id="selectRecentHour" parameterType="long" resultType="com.yogo.entity.DayAndTime">
    SELECT
    stop_time as time,COUNT(*) as times
    FROM
    conversation
    WHERE
    TIMESTAMPDIFF(
    hour,
    FROM_UNIXTIME(CAST((stop_time/1000) AS signed)),
    FROM_UNIXTIME(CAST((#{timestamp}/1000) AS signed))

    ) &lt;24
    GROUP BY
    FROM_UNIXTIME(CAST((stop_time/1000) AS signed),'%Y%m%d%h');
  </select>

  <select id="selectRecentMinute" parameterType="long" resultType="com.yogo.entity.DayAndTime">
    SELECT
    stop_time as time,COUNT(*) as times
    FROM
    conversation
    WHERE
    TIMESTAMPDIFF(
    MINUTE,
    FROM_UNIXTIME(CAST((stop_time/1000) AS signed)),
    FROM_UNIXTIME(CAST((#{timestamp}/1000) AS signed))

    ) &lt;10
    GROUP BY
    FROM_UNIXTIME(CAST((stop_time/1000) AS signed),'%Y%m%d%h%i');
  </select>

  <select id="selectRecentPeopleMonth" resultType="com.yogo.entity.DayAndTime">
    SELECT
    stop_time as time,COUNT(*) as times
    FROM
    conversation
    WHERE
    TIMESTAMPDIFF(
    month,
    FROM_UNIXTIME(CAST((stop_time/1000) AS signed)),
    FROM_UNIXTIME(CAST((#{timestamp}/1000) AS signed))

    ) &lt; 1 AND #{serviceId} = service_id
    GROUP BY
    FROM_UNIXTIME(CAST((stop_time/1000) AS signed),'%Y%m%d');
  </select>

  <select id="selectRecentPeopleWeekend" resultType="com.yogo.entity.DayAndTime">
    SELECT
    stop_time as time,COUNT(*) as times
    FROM
    conversation
    WHERE
    TIMESTAMPDIFF(
    day,
    FROM_UNIXTIME(CAST((stop_time/1000) AS signed)),
    FROM_UNIXTIME(CAST((#{timestamp}/1000) AS signed))
    ) &lt; 7 AND #{serviceId} = service_id
    GROUP BY
    FROM_UNIXTIME(CAST((stop_time/1000) AS signed),'%Y%m%d');
  </select>

  <select id="selectRecentPeopleHour"  resultType="com.yogo.entity.DayAndTime">
    SELECT
    stop_time as time,COUNT(*) as times
    FROM
    conversation
    WHERE
    TIMESTAMPDIFF(
    hour,
    FROM_UNIXTIME(CAST((stop_time/1000) AS signed)),
    FROM_UNIXTIME(CAST((#{timestamp}/1000) AS signed))

    ) &lt;24 AND #{serviceId} = service_id
    GROUP BY
    FROM_UNIXTIME(CAST((stop_time/1000) AS signed),'%Y%m%d%h');
  </select>
  <select id="selectAvgScore" resultType="Double">
    SELECT IFNULL(AVG(score),0) FROM conversation WHERE start_time <![CDATA[  >=  ]]> #{startTime}  AND stop_time <![CDATA[   <=  ]]> #{stopTime}
  </select>
  <select id="selectScore" resultType="com.yogo.bean.ScoreAndNum">
    SELECT score,count(conversation_id) as countNum FROM conversation WHERE start_time <![CDATA[  >=  ]]> #{startTime} AND stop_time <![CDATA[   <=  ]]> #{stopTime} GROUP BY score
  </select>
  <select id="selectScoreRank" resultType="com.yogo.entity.ScoreAndRank">
SELECT
	service_id,
	grades,
	gradesrank
FROM
   (SELECT
    service_id,grades,
    CASE
    WHEN @rowtotal = obj.grades THEN
    @rownum
    WHEN @rowtotal := obj.grades THEN
    @rownum :=@rownum + 1
    WHEN @rowtotal = 0 THEN
    @rownum :=@rownum + 1
    END AS gradesrank FROM(
    (SELECT
    a.service_id,
    AVG(score) AS grades
    FROM
    customer_service as a,
    conversation as b
    WHERE
    a.service_id = b.service_id AND b.start_time <![CDATA[  >=  ]]> #{startTime} AND b.stop_time <![CDATA[  <=  ]]> #{stopTime}
    GROUP BY
    a.service_id
    ORDER BY grades desc) as obj,(SELECT @rownum := 0 ,@rowtotal := NULL) r)) as cc WHERE  service_id = #{serviceId}
  </select>
  
  <select id="selectConNumAndRank" resultType="com.yogo.entity.ConNumAndRank">
SELECT
	service_id,
	num,
	numrank
FROM
    (SELECT
    service_id,num,
    CASE
    WHEN @rowtotal = obj.num THEN
    @rownum
    WHEN @rowtotal := obj.num THEN
    @rownum :=@rownum + 1
    WHEN @rowtotal = 0 THEN
    @rownum :=@rownum + 1
    END AS numrank FROM(
    (SELECT
    a.service_id,
    COUNT(conversation_id) AS num
    FROM
    customer_service as a,
    conversation as b
    WHERE
     a.service_id = b.service_id AND b.start_time <![CDATA[  >=  ]]> #{startTime} AND b.stop_time <![CDATA[  <=  ]]> #{stopTime}
    GROUP BY
    a.service_id
    ORDER BY num desc) as obj,(SELECT @rownum := 0 ,@rowtotal := NULL) r)) as cc WHERE  service_id = #{serviceId}
  </select>
  <select id="selectClientChatList" resultType="com.yogo.entity.Client">
    SELECT
	b.*
FROM
	conversation a,
	client b
WHERE
	a.client_id = b.client_id
AND a.service_id = #{serviceId}
GROUP BY
	b.client_id
  </select>
</mapper>