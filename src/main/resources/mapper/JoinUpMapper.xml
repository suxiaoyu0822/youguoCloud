<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yogo.dao.JoinUpMapper">
  <select id="getTodayClientCount" parameterType="map" resultType="java.lang.Long">
    select count(DISTINCT client_id) clientCount from join_up where time between #{dayStartTime} and #{nowTime}
  </select>
  <resultMap id="BaseResultMap" type="com.yogo.entity.JoinUp">
    <result column="join_up_id" jdbcType="INTEGER" property="joinUpId" />
    <result column="access_id" jdbcType="INTEGER" property="accessId" />
    <result column="client_id" jdbcType="INTEGER" property="clientId" />
    <result column="time" jdbcType="BIGINT" property="time" />
    <result column="account" jdbcType="VARCHAR" property="account" />
    <association property="access" javaType="com.yogo.entity.Access">
      <id column="access_id" property="accessId"/>
      <result column="name" property="name"/>
    </association>
  </resultMap>
  <!--<update id="updateAllJoinUp" parameterType="map">-->
    <!--update join_up inner join access on join_up.access_id = access.access_id-->
    <!--set account = case access.name-->
    <!--when 'QQ' then #{qq}-->
    <!--when '微信' then #{wx}-->
    <!--when '微博' then #{weibo}-->
    <!--END-->
    <!--where access.name in('QQ','微信','微博') and join_up.client_id = #{clientId}-->
  <!--</update>-->
  <select id="selectByClientId" resultMap="BaseResultMap">
    select join_up.*, access.* from join_up,access WHERE client_id=#{clientId} AND join_up.access_id=access.access_id;
  </select>
  <select id="selectByRecord" resultMap="BaseResultMap">
    select join_up.*, access.* from join_up,access WHERE join_up.access_id=#{accessId} AND account=#{account} AND join_up.access_id=access.access_id;
  </select>
  <select id="selectLastJoinByClientId" resultMap="BaseResultMap">
    select join_up.*, access.* from join_up,access WHERE join_up.access_id=access.access_id
AND join_up_id = (SELECT MAX(join_up_id) FROM join_up WHERE client_id= #{clientId})
  </select>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    join_up_id, access_id, client_id, time, account
  </sql>
  <select id="selectByExample" parameterType="com.yogo.entity.JoinUpExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from join_up
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="com.yogo.entity.JoinUpExample">
    delete from join_up
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.yogo.entity.JoinUp">
    insert into join_up (join_up_id, access_id, client_id, 
      time, account)
    values (#{joinUpId,jdbcType=INTEGER}, #{accessId,jdbcType=INTEGER}, #{clientId,jdbcType=INTEGER}, 
      #{time,jdbcType=BIGINT}, #{account,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.yogo.entity.JoinUp">
    insert into join_up
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="joinUpId != null">
        join_up_id,
      </if>
      <if test="accessId != null">
        access_id,
      </if>
      <if test="clientId != null">
        client_id,
      </if>
      <if test="time != null">
        time,
      </if>
      <if test="account != null">
        account,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="joinUpId != null">
        #{joinUpId,jdbcType=INTEGER},
      </if>
      <if test="accessId != null">
        #{accessId,jdbcType=INTEGER},
      </if>
      <if test="clientId != null">
        #{clientId,jdbcType=INTEGER},
      </if>
      <if test="time != null">
        #{time,jdbcType=BIGINT},
      </if>
      <if test="account != null">
        #{account,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.yogo.entity.JoinUpExample" resultType="java.lang.Long">
    select count(*) from join_up
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update join_up
    <set>
      <if test="record.joinUpId != null">
        join_up_id = #{record.joinUpId,jdbcType=INTEGER},
      </if>
      <if test="record.accessId != null">
        access_id = #{record.accessId,jdbcType=INTEGER},
      </if>
      <if test="record.clientId != null">
        client_id = #{record.clientId,jdbcType=INTEGER},
      </if>
      <if test="record.time != null">
        time = #{record.time,jdbcType=BIGINT},
      </if>
      <if test="record.account != null">
        account = #{record.account,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update join_up
    set join_up_id = #{record.joinUpId,jdbcType=INTEGER},
      access_id = #{record.accessId,jdbcType=INTEGER},
      client_id = #{record.clientId,jdbcType=INTEGER},
      time = #{record.time,jdbcType=BIGINT},
      account = #{record.account,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <select id="selectDuringClientNum" resultType="com.yogo.entity.JoinUp">
    SELECT * FROM join_up WHERE time BETWEEN #{startTime} AND #{stopTime} GROUP BY client_id;
  </select>
  <select id="selectAccess" resultType="com.yogo.entity.AccessAndNumDuring">
    SELECT a.access_id id,name,count(a.join_up_id) num FROM join_up a,access b WHERE a.access_id = b.access_id AND time BETWEEN #{startTime} AND #{stopTime} GROUP BY a.access_id
  </select>
</mapper>