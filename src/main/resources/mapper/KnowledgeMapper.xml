<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yogo.dao.KnowledgeMapper">
  <resultMap id="BaseResultMap" type="com.yogo.entity.Knowledge">
    <result column="knowledge_id" jdbcType="INTEGER" property="knowledgeId" />
    <result column="question" jdbcType="VARCHAR" property="question" />
    <result column="answer" jdbcType="VARCHAR" property="answer" />
    <result column="level" jdbcType="INTEGER" property="level" />
    <result column="author" jdbcType="INTEGER" property="author" />
    <result column="time" jdbcType="BIGINT" property="time" />
    <collection property="keywordList" ofType="com.yogo.entity.Keyword">
      <id column="keyword_id" property="keywordId"/>
      <result column="value" property="value"/>
    </collection>
  </resultMap>
  <select id="selectLastId" resultType="java.lang.Integer">
    select max(knowledge_id) from knowledge;
  </select>
  <select id="selectByKeywordId" resultType="com.yogo.entity.Knowledge">
      select knowledge.* from knowledge, keyword, knowledge_keyword
      where keyword.keyword_id=#{keywordId} and knowledge.knowledge_id=knowledge_keyword.knowledge_id
      and keyword.keyword_id=knowledge_keyword.keyword_id;
  </select>
  <select id="selectByKeywordId1" resultType="com.yogo.entity.Knowledge">
    select knowledge.* from knowledge, keyword, knowledge_keyword
    where keyword.keyword_id=#{keywordId} and knowledge.knowledge_id=knowledge_keyword.knowledge_id
    and keyword.keyword_id=knowledge_keyword.keyword_id AND knowledge.`level`<![CDATA[<=1 ]]>;
  </select>
  <delete id="deleteById">
    DELETE FROM knowledge WHERE knowledge_id=#{knowledgeId}
  </delete>
  <select id="selectByKnowledgeId" resultMap="BaseResultMap">
      select knowledge.*, keyword.* from knowledge, keyword, knowledge_keyword
      where knowledge.knowledge_id=#{knowledgeId} and knowledge.knowledge_id=knowledge_keyword.knowledge_id
      and keyword.keyword_id=knowledge_keyword.keyword_id;
  </select>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    knowledge_id, question, answer, level, author, time
  </sql>
  <select id="selectByExample" parameterType="com.yogo.entity.KnowledgeExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from knowledge
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="com.yogo.entity.KnowledgeExample">
    delete from knowledge
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.yogo.entity.Knowledge">
    insert into knowledge (knowledge_id, question, answer, 
      level, author, time)
    values (#{knowledgeId,jdbcType=INTEGER}, #{question,jdbcType=VARCHAR}, #{answer,jdbcType=VARCHAR}, 
      #{level,jdbcType=INTEGER}, #{author,jdbcType=INTEGER}, #{time,jdbcType=BIGINT})
  </insert>
  <insert id="insertSelective" parameterType="com.yogo.entity.Knowledge">
    insert into knowledge
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="knowledgeId != null">
        knowledge_id,
      </if>
      <if test="question != null">
        question,
      </if>
      <if test="answer != null">
        answer,
      </if>
      <if test="level != null">
        level,
      </if>
      <if test="author != null">
        author,
      </if>
      <if test="time != null">
        time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="knowledgeId != null">
        #{knowledgeId,jdbcType=INTEGER},
      </if>
      <if test="question != null">
        #{question,jdbcType=VARCHAR},
      </if>
      <if test="answer != null">
        #{answer,jdbcType=VARCHAR},
      </if>
      <if test="level != null">
        #{level,jdbcType=INTEGER},
      </if>
      <if test="author != null">
        #{author,jdbcType=INTEGER},
      </if>
      <if test="time != null">
        #{time,jdbcType=BIGINT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.yogo.entity.KnowledgeExample" resultType="java.lang.Long">
    select count(*) from knowledge
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update knowledge
    <set>
      <if test="record.knowledgeId != null">
        knowledge_id = #{record.knowledgeId,jdbcType=INTEGER},
      </if>
      <if test="record.question != null">
        question = #{record.question,jdbcType=VARCHAR},
      </if>
      <if test="record.answer != null">
        answer = #{record.answer,jdbcType=VARCHAR},
      </if>
      <if test="record.level != null">
        level = #{record.level,jdbcType=INTEGER},
      </if>
      <if test="record.author != null">
        author = #{record.author,jdbcType=INTEGER},
      </if>
      <if test="record.time != null">
        time = #{record.time,jdbcType=BIGINT},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update knowledge
    set knowledge_id = #{record.knowledgeId,jdbcType=INTEGER},
      question = #{record.question,jdbcType=VARCHAR},
      answer = #{record.answer,jdbcType=VARCHAR},
      level = #{record.level,jdbcType=INTEGER},
      author = #{record.author,jdbcType=INTEGER},
      time = #{record.time,jdbcType=BIGINT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <select id="selectKnowledgeBySearchName" parameterType="String" resultType="com.yogo.entity.Knowledge">
    SELECT * FROM knowledge WHERE  question LIKE CONCAT('%',#{keyword},'%') OR answer LIKE CONCAT('%',#{keyword},'%');
  </select>
</mapper>