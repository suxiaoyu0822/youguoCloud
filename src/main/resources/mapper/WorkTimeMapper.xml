<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yogo.dao.WorkTimeMapper">
  <select id="selectTodayWorkTime" resultMap="BaseResultMap">
    select * from work_time where service_id=#{serviceId}
    and ((start_time BETWEEN #{dayStart} and #{dayEnd}) OR (end_time BETWEEN #{dayStart} and #{dayEnd}));
  </select>
  <delete id="deleteWorkTime" parameterType="java.lang.Integer">
    delete from work_time where work_time_id = #{workTimeId}
  </delete>
  <delete id="deleteAllWorkTimeList" parameterType="java.lang.Integer">
    delete from work_time where service_id = #{serviceId}
  </delete>
  <update id="updateWorkTime" parameterType="map">
    update work_time a,(select work_time_id from work_time where service_id = #{serviceId} and end_time is null) b set a.end_time = #{endTime} where a.work_time_id = b.work_time_id
  </update>
  <select id="selectAllWorkTimeSum" parameterType="java.lang.Integer" resultType="java.lang.Long">
    select SUM(end_time-start_time) from work_time where service_id = #{serviceId};
  </select>
  <resultMap id="BaseResultMap" type="com.yogo.entity.WorkTime">
    <result column="work_time_id" jdbcType="INTEGER" property="workTimeId" />
    <result column="service_id" jdbcType="INTEGER" property="serviceId" />
    <result column="start_time" jdbcType="BIGINT" property="startTime" />
    <result column="end_time" jdbcType="BIGINT" property="endTime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    work_time_id, service_id, start_time, end_time
  </sql>
  <select id="selectByExample" parameterType="com.yogo.entity.WorkTimeExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from work_time
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="com.yogo.entity.WorkTimeExample">
    delete from work_time
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.yogo.entity.WorkTime">
    insert into work_time (work_time_id, service_id, start_time, 
      end_time)
    values (#{workTimeId,jdbcType=INTEGER}, #{serviceId,jdbcType=INTEGER}, #{startTime,jdbcType=BIGINT}, 
      #{endTime,jdbcType=BIGINT})
  </insert>
  <insert id="insertSelective" parameterType="com.yogo.entity.WorkTime">
    insert into work_time
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="workTimeId != null">
        work_time_id,
      </if>
      <if test="serviceId != null">
        service_id,
      </if>
      <if test="startTime != null">
        start_time,
      </if>
      <if test="endTime != null">
        end_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="workTimeId != null">
        #{workTimeId,jdbcType=INTEGER},
      </if>
      <if test="serviceId != null">
        #{serviceId,jdbcType=INTEGER},
      </if>
      <if test="startTime != null">
        #{startTime,jdbcType=BIGINT},
      </if>
      <if test="endTime != null">
        #{endTime,jdbcType=BIGINT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.yogo.entity.WorkTimeExample" resultType="java.lang.Long">
    select count(*) from work_time
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update work_time
    <set>
      <if test="record.workTimeId != null">
        work_time_id = #{record.workTimeId,jdbcType=INTEGER},
      </if>
      <if test="record.serviceId != null">
        service_id = #{record.serviceId,jdbcType=INTEGER},
      </if>
      <if test="record.startTime != null">
        start_time = #{record.startTime,jdbcType=BIGINT},
      </if>
      <if test="record.endTime != null">
        end_time = #{record.endTime,jdbcType=BIGINT},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update work_time
    set work_time_id = #{record.workTimeId,jdbcType=INTEGER},
      service_id = #{record.serviceId,jdbcType=INTEGER},
      start_time = #{record.startTime,jdbcType=BIGINT},
      end_time = #{record.endTime,jdbcType=BIGINT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  
  
  <!--Create By Cjn-->
  <select id="selectOnlineServerNum" resultType="int">
    SELECT  COUNT(service_id) FROM work_time WHERE  end_time IS  NULL;
  </select>
  
  <select id="selectTimeAndRank" resultType="com.yogo.entity.TimeAndRank">
SELECT
	service_id,
	tottime,
	timerank
FROM
    (SELECT
    service_id,tottime,
    CASE
    WHEN @rowtotal = obj.tottime THEN
    @rownum
    WHEN @rowtotal := obj.tottime THEN
    @rownum :=@rownum + 1
    WHEN @rowtotal = 0 THEN
    @rownum :=@rownum + 1
    END AS timerank FROM(
    (SELECT
    a.service_id,
    SUM(end_time-start_time) AS tottime
    FROM
    customer_service as a,
    work_time as b
    WHERE
    a.service_id = b.service_id AND b.end_time <![CDATA[  !=  ]]>"" AND b.start_time <![CDATA[  >=  ]]> #{startTime} AND b.end_time  <![CDATA[  <=  ]]> #{endTime}
    GROUP BY
    a.service_id
    ORDER BY tottime desc) as obj,(SELECT @rownum := 0 ,@rowtotal := NULL) r)) as cc WHERE  service_id = #{serviceId}
  </select>
</mapper>